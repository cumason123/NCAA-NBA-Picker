# -*- coding: utf-8 -*-
"""NBC Draft Pred

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FduXTtlJ4u11cx1M0S3rXTHcor8yOfBd
"""
import pandas as pd
import numpy as np
from sklearn_pandas import CategoricalImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import Imputer
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split

# X = pd.read_csv("./data_loader/data/training_data/player_stats_raw_features.csv")

from data_loader.Draft import Draft
from data_loader.Applicants import Applicants

player_stats_raw_features = pd.read_csv("./data_loader/data/training_data/player_stats_raw_features.csv")
player_stats_raw_features.drop_duplicates(inplace=True)

num_attribs = ['pts', 'fga', 'fga3', 'fgm', 'fgm3', 'fta', 'ftm', 'ast', 'blk', 'stl', 'dreb', 'oreb', 'reb', 'pf', 'tf', 'tov', 'mins_played', 'grade_level', 'division', 'height_in']
cat_attribs = ["school", "conference", "position"]

num_pipeline = Pipeline([
        ('imputer', Imputer(strategy="median")),
        ('std_scaler', StandardScaler())
    ])

cat_pipeline = Pipeline([
        ('imputer', CategoricalImputer()),
        ("cat", OneHotEncoder(handle_unknown='ignore'))
])

full_pipeline = ColumnTransformer([
        ("num", num_pipeline, num_attribs),
        # ('imputer', CategoricalImputer(), cat_attribs),
        ("cat", OneHotEncoder(), cat_attribs)
])

player_stats_features = full_pipeline.fit_transform(player_stats_raw_features)

np.savetxt("./data_loader/data/training_data/player_stats_features.csv", player_stats_features, delimiter=",")

X, y = pd.read_csv("./data_loader/data/training_data/player_stats_features.csv", index_col=0), pd.read_csv(
        "./data_loader/data/training_data/player_stats_labels.csv", index_col=0)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

for dataset, name in [(X_train, "X_train"), (X_test, "X_test"), (y_train, "y_train"), (y_test, "y_test")]:
        dataset.to_csv("data_loader/data/training_data/" + name + ".csv")